#include <iostream>
#include <cstdio>
#include <queue>

using namespace std;

int n, m[53][53];
typedef pair<int, int> pii;
int dr[4] = {0, -1, 0, 1};
int dc[4] = {-1, 0, 1, 0};
bool mark[33][33] = {false};

void ReadData()
{
    cin >> n;
    string s;

    for(int i = 0; i < n; ++i){
        cin >> s;
        for(int j = 0; j < n; ++j){
            m[i][j] = s[j];
        }
    }
}

bool ValidCell(int x, int y)
{
    return (x >= 0 && x < n && y >= 0 && y < n);
}

int wallArea(int r, int c)
{
    queue<pii> Q;
    Q.push(pii(r, c));
    mark[r][c] = true;
    int ans = 1, wall = 0;
    while(!Q.empty()){
        r = Q.front().first, c = Q.front().second;
        Q.pop();
        for(int i = 0; i < 4; ++i){
            int x = r + dr[i];
            int y = c + dc[i];
            if(ValidCell(x, y) && !mark[x][y] && m[x][y] == '.'){
                ++ans;
                Q.push(pii(x, y));
                mark[x][y] = true;
            }
            else if((x == -1 && y == 0) || (x == 0 && y == -1) || (x == n && y == n-1) || (x == n-1 && y == n)) continue;
            else if((!ValidCell(x, y)) || (ValidCell(x, y) && m[x][y] == '#')){
                wall++;
            }
        }
    }
    return wall * 9;
}

int main()
{
    freopen("mirror.inp", "r", stdin);
    freopen("mirror.out", "w", stdout);

    ReadData();
    cout << wallArea(0, 0) + wallArea(n-1, n-1);

    return 0;
}
